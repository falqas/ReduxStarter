import React, { Component } from 'react';
import { Field, reduxForm } from 'redux-form'; // reduxForm func helper - this is v similar to the connect helper from the react-redux library. We use this to wrap the PostsNew component. By doing so, we gave it the ability to communicate directly from this component to the reducer that we wired up earlier ({form: formsReducer} in reducers/index.js)

class PostsNew extends Component {
    renderTitleField(field) { // field arg conains an event handler for making sure that the Field component below is responsible for dealing with this particular text input
        return (
            <div className="form-group">
            <label>Title</label>
                <input
                  className="form-control"
                  type="text"
                  {...field.input}  // wires this input to below input; takes all of the properties in the field.input object, adds them as props on the input tag. it saves us from having to write:
                    // onChange={field.input.onChage}
                    // onChange={field.input.onChage}
                    // onChange={field.input.onChage}
                />
                </div>
        );
    }

    renderTitleField(field) { // field arg conains an event handler for making sure that the Field component below is responsible for dealing with this particular text input
        return (
            <div className="form-group">
            <label>Title</label>
                <input
                  className="form-control"
                  type="text"
                  {...field.input}  // wires this input to below input; takes all of the properties in the field.input object, adds them as props on the input tag. it saves us from having to write:
                    // onChange={field.input.onChage}
                    // onChange={field.input.onChage}
                    // onChange={field.input.onChage}
                />
                </div>
        );
    }
    
    render() {
        return (
            // 1. to use field component in redux, first create a vanilla html form.

<form>  
    {/* 2. next, create a field component, and pass it a few props (name prop, component prop) what piece of state will the user be editing */}
    <Field 
    // 3. the first field will be responsible for the title that the user wants to enter for a blog post
      name="title" 
    //   4. component property takes a func or another component that will be used to display this Field component above. Important note: the Field component abstracts away all the redux wiring, event emitters etc that we don't care about. the component={} is where we add all the view stuff that the user is going to see. Here, we are putting it in a function called this.renderTitleField. Note that it's a func reference, not a call.
      component={this.renderTitleField}
    />
    </form>
            )
    }
}


export default reduxForm({
    form: 'PostsNewForm'  // think of this as the name of the form - each form takes a string as a unique name. specifies the namespace for all the state that is going to be generated by this particular component
})(PostsNew);